import numpy as np


def game_core_v3(number, a, b):
    '''МОЙ ВАРИАНТ: угадываем методом дихотомии (деления отрезка пополам):
    в качестве очередного предположения выступает число, равное половине разницы
    между предыдущим и последующим. Алгоритм угадывает не более чем за 7 шагов
    (для случая, если длина отрезка равна 100). Может быть модифицирован вместе
    с генератором случайных чисел для отрезка произвольной длины.'''
    count = 0 # счётчик попыток
    a_in = a # внутренняя переменная функции для нижней границы отрезка
    b_in = b # внутренняя переменная функции для верхней границы отрезка
    predict = 0 # инициализация переменной predict - текущего предположения
    predict_old = 0 # инициализация переменной predict_old - предыдущего предположения
    '''далее - цикл, осуществляющий дихотомию'''
    while number != predict:
        '''очередное предположение по формуле дихотомии'''
        predict = a_in + (b_in - a_in + 1) // 2
        '''необходимо делать проверку при приближении к концам исходного отрезка -
        - около 1 и 100: если очередное предположение совпадает с предыдущим,
        то искомое значение равно конецу отрезка (1 или 100)'''
        if (predict, predict_old) == (a + 1, a + 1):
            predict = a
            break
        elif (predict, predict_old) == (b - 1, b - 1):
            predict = b
            break 
        # если нет - то находимся пока в процессе поиска внутри очередного отрезка [a; b]
        elif number > predict:
            a_in = predict
            b_in = max(b_in, predict_old)
        elif number < predict:
            b_in = predict
            a_in = min(a_in, predict_old)
        predict_old = predict
        count += 1
    return(count)

        
def score_game():
    '''Запускаем игру 1000 раз, чтобы узнать, как быстро игра угадывает число'''
    a = int(input('Задайте нижнюю границу отрезка: '))
    b = int(input('Задайте верхнюю границу отрезка: '))
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(a, b + 1, size=(1000))
    for number in random_array:
        count_ls.append(game_core_v3(number, a, b))
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)

score_game()
